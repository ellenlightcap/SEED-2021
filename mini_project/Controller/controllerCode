//Create an Arduino program to perform a closed loop step response experiment. 
//In this experiment, the setpointshould initially be zero, and at a specified time the setpoint is changed to 1 rad. 
//The Arduino should display the current time and wheel position in a format that can be copy and pasted in to excel or Matlab, and then plotted.
#include <Encoder.h>
Encoder myEnc(2, 6);

#define D2 4
#define M1DIR 7
#define M2DIR 8
#define M1PWM 9
#define M2PWM 10
#define SF 12


float kp = 5;//pwm/rad
float ki = 0.18;//pwm/(rad*sec)
float integrator = 0; //radians*seconds
float e = 0; //radians
float ts = 0; //milliseccond
float tc = millis();
float r = PI; //radians
float y = 0; //radians
int u = 0; //controller (volts/pwm)

void setup() {
  // put your setup code here, to run once:
  Serial.begin(250000);

  pinMode(D2, OUTPUT);
  pinMode(M1DIR, OUTPUT);
  pinMode(M2DIR,OUTPUT);
  pinMode(M1PWM, OUTPUT);
  pinMode(M2PWM, OUTPUT);
  pinMode(SF, INPUT);
  digitalWrite(D2,HIGH);
  
  myEnc.write(0);
}

void loop() {
  // put your main code here, to run repeatedly:
      y=myEnc.read(); //encoder counts
      y = (y/1600)*PI; // radians
      Serial.println(y); //testing
      
      //steady state error
      e=r-y;//difference in position/steady state error(radians)
      
      //Serial.print(y); //testing
      //Serial.print("\t"); //testing
      
      //integrator
      integrator = integrator + (ts/1000)*e; //radians*second
      
      //implementing controller
      u = kp*e+ki*integrator; //pwm
      u = u/7.9 * 255; //pwm with respect to the supplied voltage
      //Serial.println(u);//testing
      
      //check if u is overflowing (greater or less than 255)
      if(u > 255){
        u=255;
        analogWrite(M1PWM, u);//255 is 5V
        digitalWrite(M1DIR, HIGH); //one way
      }else if(u<0){
        u = u*-1;
        if(u > 255){
          u=255;
        }
        analogWrite(M1PWM, u);//if u is less than 0 go the other direction
        digitalWrite(M1DIR, LOW);
      }
      else{
        analogWrite(M1PWM, u);//positive and CW
        digitalWrite(M1DIR, HIGH);
      }
      ts = millis() - tc;
      tc = millis();
      //Serial.print(tc);
      //Serial.print("\t");
      //Serial.println();
}
