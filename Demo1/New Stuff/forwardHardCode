//Moves for 5 feet

#include <Encoder.h>
Encoder myEnc1(2, 6);
Encoder myEnc2(3, 5);

#define D2 4
#define M1DIR 7
#define M2DIR 8
#define M1PWM 9
#define M2PWM 10
#define SF 12

#define MAXVOLT 7.2


double feet = 5;
double yRight = 0; //actual (radians)
double yLeft = 0; //actual
double uRight = 0; //controller right
double uLeft = 0; //controller left




void setup() {
  // put your setup code here, to run once:
  Serial.begin(250000);

  pinMode(2, INPUT);
  pinMode(3, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);

  pinMode(D2, OUTPUT);
  pinMode(M1DIR, OUTPUT);
  pinMode(M2DIR,OUTPUT);
  pinMode(M1PWM, OUTPUT);
  pinMode(M2PWM, OUTPUT);
  pinMode(SF, INPUT);
  digitalWrite(D2,HIGH);
  
  myEnc1.write(0);
  myEnc2.write(0);

}

double threeFeet(double threeFeet){
  static double kp_right = 6.15; //615.39//pwm/rad //13.72//1.5
  static double ki_right = 0.1; //309.49//pwm/(rad*sec)//.777
  static double kp_left = 4.5; //696.27// 11.8178
  static double ki_left = 0.39; //394.448 //0.66949
  static double integratorRight = 0; //rad*sec
  static double integratorLeft = 0; //rad*sec
  static double eRight = 0; // steady state error
  static double eLeft = 0; //steady state error
  static double ts = 0;
  static double tc = millis();
  yRight = myEnc1.read();
  Serial.print(yRight);
  Serial.print("\t");
  yLeft = myEnc2.read();
  yRight = (yRight/1600)*PI; //radians
  yLeft = (yLeft/1600)*PI; //radians
  yRight = (yRight/24)*5.75;//feet
  yLeft = (yLeft/24)*5.75;//feet

  Serial.print(yRight);
  Serial.print("\t");
  Serial.print(yLeft);
  Serial.print("\t");

  //error between wanted and actual
  eRight = feet - yRight;
  eLeft = (feet*-1) - yLeft;

  Serial.print(eRight);
  Serial.print("\t");
  Serial.print(eLeft);
  Serial.print("\t");

  
  //integrator shit
  integratorRight = integratorRight + (ts/1000)*eRight;
  integratorLeft = integratorLeft + (ts/1000)*eLeft;

  Serial.print(integratorRight);
  Serial.print("\t");
  Serial.print(integratorLeft);
  Serial.print("\t");


  //implementing controller
  uRight = kp_right*eRight + ki_right*integratorRight;
  uLeft = kp_left*eLeft + ki_left*integratorLeft;

  Serial.print(uRight);
  Serial.print("\t");
  Serial.print(uLeft);
  Serial.println("\t");

  
  uRight = (uRight/MAXVOLT) * 255;
  uLeft = (uLeft/MAXVOLT) * 255;

  Serial.print(uRight);
  Serial.print("\t");
  Serial.print(uLeft);
  Serial.println("\t");

  if (uRight < 0){
    digitalWrite(M1DIR, HIGH);
  }else{
    digitalWrite(M1DIR, LOW);
  }
  uRight = abs(uRight);
  if(uRight > 255){
     uRight = 255;
  }

  if (uLeft < 0){
    digitalWrite(M2DIR, HIGH);
  }else{
    digitalWrite(M2DIR, LOW);
  }
  uLeft = abs(uLeft);
  if(uLeft > 255){
     uLeft = 255;
  }


  analogWrite(M1PWM, abs(uRight));
  analogWrite(M2PWM, abs(uLeft));
  ts = millis() - tc;
  tc = millis();
      
   Serial.print("time: ");
   Serial.print(ts);

   Serial.println();
}

double fiveFeet(double fiveFeet){
  static double kp_right = 10; //615.39//pwm/rad //13.72//1.5
  static double ki_right = 0.1; //309.49//pwm/(rad*sec)//.777
  static double kp_left = 9; //696.27// 11.8178
  static double ki_left = 0.39; //394.448 //0.66949
  static double integratorRight = 0; //rad*sec
  static double integratorLeft = 0; //rad*sec
  static double eRight = 0; // steady state error
  static double eLeft = 0; //steady state error
  static double ts = 0;
  static double tc = millis();
  yRight = myEnc1.read();
  Serial.print(yRight);
  Serial.print("\t");
  yLeft = myEnc2.read();
  yRight = (yRight/1600)*PI; //radians
  yLeft = (yLeft/1600)*PI; //radians
  yRight = (yRight/24)*5.75;//feet
  yLeft = (yLeft/24)*5.75;//feet

  Serial.print(yRight);
  Serial.print("\t");
  Serial.print(yLeft);
  Serial.print("\t");

  //error between wanted and actual
  eRight = feet - yRight;
  eLeft = (feet*-1) - yLeft;

  Serial.print(eRight);
  Serial.print("\t");
  Serial.print(eLeft);
  Serial.print("\t");

  
  //integrator shit
  integratorRight = integratorRight + (ts/1000)*eRight;
  integratorLeft = integratorLeft + (ts/1000)*eLeft;

  Serial.print(integratorRight);
  Serial.print("\t");
  Serial.print(integratorLeft);
  Serial.print("\t");


  //implementing controller
  uRight = kp_right*eRight + ki_right*integratorRight;
  uLeft = kp_left*eLeft + ki_left*integratorLeft;

  Serial.print(uRight);
  Serial.print("\t");
  Serial.print(uLeft);
  Serial.println("\t");

  
  uRight = (uRight/MAXVOLT) * 255;
  uLeft = (uLeft/MAXVOLT) * 255;

  Serial.print(uRight);
  Serial.print("\t");
  Serial.print(uLeft);
  Serial.println("\t");

  if (uRight < 0){
    digitalWrite(M1DIR, HIGH);
  }else{
    digitalWrite(M1DIR, LOW);
  }
  uRight = abs(uRight);
  if(uRight > 255){
     uRight = 255;
  }

  if (uLeft < 0){
    digitalWrite(M2DIR, HIGH);
  }else{
    digitalWrite(M2DIR, LOW);
  }
  uLeft = abs(uLeft);
  if(uLeft > 255){
     uLeft = 255;
  }


  analogWrite(M1PWM, abs(uRight));
  analogWrite(M2PWM, abs(uLeft));
  ts = millis() - tc;
  tc = millis();
      
   Serial.print("time: ");
   Serial.print(ts);

   Serial.println();
  
}

double sevenFeet(double sevenFeet){
    static double kp_right = 10; //615.39//pwm/rad //13.72//1.5
  static double ki_right = 0.1; //309.49//pwm/(rad*sec)//.777
  static double kp_left = 9; //696.27// 11.8178
  static double ki_left = 0.39; //394.448 //0.66949
  static double integratorRight = 0; //rad*sec
  static double integratorLeft = 0; //rad*sec
  static double eRight = 0; // steady state error
  static double eLeft = 0; //steady state error
  static double ts = 0;
  static double tc = millis();
  yRight = myEnc1.read();
  Serial.print(yRight);
  Serial.print("\t");
  yLeft = myEnc2.read();
  yRight = (yRight/1600)*PI; //radians
  yLeft = (yLeft/1600)*PI; //radians
  yRight = (yRight/24)*5.75;//feet
  yLeft = (yLeft/24)*5.75;//feet

  Serial.print(yRight);
  Serial.print("\t");
  Serial.print(yLeft);
  Serial.print("\t");

  //error between wanted and actual
  eRight = feet - yRight;
  eLeft = (feet*-1) - yLeft;

  Serial.print(eRight);
  Serial.print("\t");
  Serial.print(eLeft);
  Serial.print("\t");

  
  //integrator shit
  integratorRight = integratorRight + (ts/1000)*eRight;
  integratorLeft = integratorLeft + (ts/1000)*eLeft;

  Serial.print(integratorRight);
  Serial.print("\t");
  Serial.print(integratorLeft);
  Serial.print("\t");


  //implementing controller
  uRight = kp_right*eRight + ki_right*integratorRight;
  uLeft = kp_left*eLeft + ki_left*integratorLeft;

  Serial.print(uRight);
  Serial.print("\t");
  Serial.print(uLeft);
  Serial.println("\t");

  
  uRight = (uRight/MAXVOLT) * 255;
  uLeft = (uLeft/MAXVOLT) * 255;

  Serial.print(uRight);
  Serial.print("\t");
  Serial.print(uLeft);
  Serial.println("\t");

  if (uRight < 0){
    digitalWrite(M1DIR, HIGH);
  }else{
    digitalWrite(M1DIR, LOW);
  }
  uRight = abs(uRight);
  if(uRight > 255){
     uRight = 255;
  }

  if (uLeft < 0){
    digitalWrite(M2DIR, HIGH);
  }else{
    digitalWrite(M2DIR, LOW);
  }
  uLeft = abs(uLeft);
  if(uLeft > 255){
     uLeft = 255;
  }


  analogWrite(M1PWM, abs(uRight));
  analogWrite(M2PWM, abs(uLeft));
  ts = millis() - tc;
  tc = millis();
      
   Serial.print("time: ");
   Serial.print(ts);

   Serial.println();
}

void loop() {
    myEnc1.write(0);
    myEnc2.write(0);
    if (feet == 3){
      threeFeet(feet);
      while ((yRight < feet) && (yLeft < feet)){
        threeFeet(feet);
      }
    }
    if (feet == 5){
      fiveFeet(feet);
      while ((yRight < feet) && (yLeft < feet)){
        fiveFeet(feet);
      }
    }
    if (feet == 7){
      sevenFeet(feet);
      while ((yRight < feet) && (yLeft < feet)){
        sevenFeet(feet);
      }
    }

  //actual distance
  
}
