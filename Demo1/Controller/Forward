//Moves for 5 feet

#include <Encoder.h>
Encoder myEnc1(2, 6);
Encoder myEnc2(3, 5);

#define D2 4
#define M1DIR 7
#define M2DIR 8
#define M1PWM 9
#define M2PWM 10
#define SF 12

#define FT2METERS 0.3048; //meters in one foot
#define PERIOD 50
#define RADIUS 0.0746125
#define RAD2DEGREE 0.0174533 //deg per radian
#define SATURATION_POINT 0.5 //need to look into more
#define BATTERY_VOLTS 7.2

double kp_right = 0.6; //615.39//pwm/rad //13.72 //probably need to make the kp's smaller now
double ki_right = 30; //309.49//pwm/(rad*sec)//.777
double kp_left = 0.6; //696.27// 11.8178
double ki_left = 39; //394.448 //0.66949
double integratorRight = 0; //rad*sec
double integratorLeft = 0; //rad*sec
double eRight = 0; // steady state error
double eLeft = 0; //steady state error
double ts = 0; 
double feet = 3;
double positionWanted = 0;

double yRight = 0; //actual (radians)
double yLeft = 0; //actual
int uRight = 0; //controller right
int uLeft = 0; //controller left
double oldyRight = 0;
double oldyLeft = 0;
double leftAV = 0;
double rightAV = 0;
double speedR = 0;
double speedL = 0;
double posR = 0;
double posL = 0;
double wantedSpeedR = 0;
double wantedSpeedL = 0;
double speedErrorR = 0;
double speedErrorL = 0;
double totalErrorR=0;
double totalErrorL = 0;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(250000);

  pinMode(2, INPUT);
  pinMode(3, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);

  pinMode(D2, OUTPUT);
  pinMode(M1DIR, OUTPUT);
  pinMode(M2DIR,OUTPUT);
  pinMode(M1PWM, OUTPUT);
  pinMode(M2PWM, OUTPUT);
  pinMode(SF, INPUT);
  digitalWrite(D2,HIGH);
  
  myEnc1.write(0);
  myEnc2.write(0);

}

void loop() {
   static unsigned long tc = 0;
   tc=millis();

   if(tc > 1000){
    positionWanted = feet*FT2METERS; //set desired position to meters
   }

  //where its at
  yRight = ((double)myEnc1.read() * 360)/3200;
  yLeft = ((double)myEnc2.read() * 360)/3200;
  
  //calculates angular velocity
  rightAV = (1000* (yRight - oldyRight))/PERIOD;
  leftAV = (1000 * (yLeft - oldyLeft))/PERIOD;
  
  //actual forward velocity
  speedR = RADIUS * RAD2DEGREE * rightAV;
  speedL = -1*RADIUS * RAD2DEGREE * leftAV;
  
  //actual position
  posR = (((double)myEnc1.read() * 2*PI)/3200) * RADIUS;
  posL = (-1*(((double)myEnc2.read() * 2*PI)/3200) * RADIUS);
  
  //steady state error
  eRight = positionWanted - posR;
  eLeft = positionWanted - posL;
  
  //speed wanted
  wantedSpeedR = eRight*kp_right;
  wantedSpeedL = eLeft*kp_left;
  
  //check that speed hasn't gone past saturation point
  if (wantedSpeedR > SATURATION_POINT) {
    wantedSpeedR = SATURATION_POINT;
    }else if ( wantedSpeedR < -SATURATION_POINT){
    wantedSpeedR = -SATURATION_POINT;
    }
    
  if (wantedSpeedL > SATURATION_POINT) {
    wantedSpeedL = SATURATION_POINT;
    }else if ( wantedSpeedL < -SATURATION_POINT){
    wantedSpeedL = -SATURATION_POINT;
    }
    
    //error in speed
    speedErrorR = wantedSpeedR - speedR;
    speedErrorL = wantedSpeedL - speedL;
    
    //total error
    totalErrorR = ((speedErrorR * PERIOD)/1000)+totalErrorR;
    totalErrorL = ((speedErrorL * PERIOD)/1000)+totalErrorL;
    
    uRight = (totalErrorR * ki_right)+(speedErrorR*kp_right);
    uLeft = (totalErrorL * ki_left)+(speedErrorL*kp_left);
    
    if(uRight > BATTERY_VOLTS){
      uRight = BATTERY_VOLTS;
     }else if (uRight < (-1*BATTERY_VOLTS)){
     uRight = -1*BATTERY_VOLTS;
     }
     
     if(uLeft > BATTERY_VOLTS){
      uLeft = BATTERY_VOLTS;
     }else if (uLeft < (-1*BATTERY_VOLTS)){
     uLeft = -1*BATTERY_VOLTS;
     }
     
     if(uRight > 0){
     digitalWrite(M1DIR, LOW); //might need to change
     }else{
     digitalWrite(M1DIR, HIGH);
     }
     
     if(uLeft > 0){
     digitalWrite(M2DIR, HIGH); //might need to change
     }else{
     digitalWrite(M2DIR, LOW);
     }
     
     uRight = (uRight*255)/BATTERY_VOLTS;
     uLeft = (uLeft*255)/BATTERY_VOLTS;
     analogWrite(M1PWM, uRight);
     analogWrite(M2PWM, uLeft);
     
     oldyRight = yRight;
     oldyLeft = yLeft;
     
     if(millis() > (tc + PERIOD)){
      Serial.println("Error");
      }
      
      while(millis() < (tc+PERIOD));

}
